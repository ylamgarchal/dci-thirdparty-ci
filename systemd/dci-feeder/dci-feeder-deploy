#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import atexit
import fcntl
import sys
import subprocess
import traceback


def check_new_dci_feeder_package():
    try:
        subprocess.check_output(['yum', 'check-update', '-q', 'dci-feeder'])
    except subprocess.CalledProcessError as e:
        if e.returncode == 100:
            print("dci-feeder version: %s " % e.output.strip().split()[1])
            return True
    return False


def install_new_dci_feeder_package():
    print("installing new dci-feeder package")


def deploy_dci_feeder():
    print("start deployment")
    cmd = ['ansible-playbook', '/opt/dci-feeder/ansible/deploy.yml']
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)

    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        elif output:
            # not print() to avoid newline
            sys.stdout.write(output)
    return process.poll()


def main():
    new_package = check_new_dci_feeder_package()
    if new_package:
        print("new package available")
        install_new_dci_feeder_package()
        deploy_dci_feeder()
    else:
        print("no new package available")


if __name__ == "__main__":
    print("start dci-feeder-deploy")
    # acquire an exclusive file lock
    lock_file = open("/tmp/dci-feeder-deploy.lock", "w")
    try:
        fcntl.lockf(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
        # release the lock on exit
        atexit.register(lock_file.close)
        atexit.register(fcntl.lockf, lock_file, fcntl.LOCK_UN)
    except IOError:
        print("dci-feeder-deploy instance already running, exit(0)")
        sys.exit(0)

    try:
        main()
    except Exception:
        print(traceback.format_exc())
    sys.exit(0)
